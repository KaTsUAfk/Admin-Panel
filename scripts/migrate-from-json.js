// scripts/migrate-from-json.js
const { PrismaClient } = require("@prisma/client");
const fs = require("fs");
const path = require("path");

const prisma = new PrismaClient();
const BACKEND_DIR = path.join(__dirname, "..", "backend");

async function migrate() {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ JSON –≤ SQLite...");

  // === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
  const usersPath = path.join(BACKEND_DIR, "users.json");
  const users = JSON.parse(fs.readFileSync(usersPath, "utf8") || "[]");

  for (const user of users) {
    // 1. –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const upsertedUser = await prisma.user.upsert({
      where: { username: user.username },
      update: {
        passwordHash: user.passwordHash,
        role: user.role || "user",
        createdAt: user.createdAt ? new Date(user.createdAt) : new Date(),
      },
      create: {
        username: user.username,
        passwordHash: user.passwordHash,
        role: user.role || "user",
        createdAt: user.createdAt ? new Date(user.createdAt) : new Date(),
      },
    });

    // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º UserSettings
    if (user.settings) {
      await prisma.userSettings.upsert({
        where: { userId: upsertedUser.id },
        update: {
          darkMode: Boolean(user.settings.darkMode),
        },
        create: {
          userId: upsertedUser.id,
          darkMode: Boolean(user.settings.darkMode),
        },
      });
    }
  }
  console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

  // === –õ–æ–≥–∏ –≤—Ö–æ–¥–æ–≤ ===
  const loginLogsPath = path.join(BACKEND_DIR, "login-logs.json");
  const loginLogs = JSON.parse(fs.readFileSync(loginLogsPath, "utf8") || "[]");
  for (const log of loginLogs) {
    await prisma.loginLog.create({
      data: {
        userId: log.userId || null,
        username: log.username || "unknown",
        ip: log.ip || null,
        userAgent: log.userAgent || null,
        timestamp: log.timestamp ? new Date(log.timestamp) : new Date(),
      },
    });
  }
  console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞: ${loginLogs.length}`);

  // === –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π ===
  const actionLogsPath = path.join(BACKEND_DIR, "action-logs.json");
  const actionLogs = JSON.parse(
    fs.readFileSync(actionLogsPath, "utf8") || "[]"
  );
  for (const log of actionLogs) {
    await prisma.actionLog.create({
      data: {
        userId: log.userId || null,
        username: log.username || "unknown",
        role: log.role || "user",
        action: log.action,
        details: log.details || undefined,
        ip: log.ip || null,
        userAgent: log.userAgent || null,
        timestamp: log.timestamp ? new Date(log.timestamp) : new Date(),
      },
    });
  }
  console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π: ${actionLogs.length}`);

  console.log("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  await prisma.$disconnect();
}

migrate().catch(async (e) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", e);
  await prisma.$disconnect();
  process.exit(1);
});
