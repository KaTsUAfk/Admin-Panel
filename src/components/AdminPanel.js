// src/components/AdminPanel.js
import React, { useState, useEffect } from "react";
import VideoManager from "./VideoManager";
import DevicesTable from "./DevicesTable";
import Layout from "./Layout";
import ActiveSessions from "./ActiveSessions";
import VideoPlayer from "./VideoPlayer";
import CitySwitcher from "./CitySwitcher";
import VideoProgress from "./VideoProgress";
import { useCity } from "./CityContext";
import {
  getStatus,
  getScriptStatus,
  sendDeviceCommand,
  restartAllDevices,
  runConcatScript,
} from "../services/api";
import { isAuthenticated, getCurrentUser } from "../services/authService";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";

const AdminPanel = () => {
  const navigate = useNavigate();
  const { changeCity } = useCity();
  const currentUser = getCurrentUser();

  const isAdmin = currentUser?.role === "admin";
  const isModerator = currentUser?.role === "moderator";

  const [serverData, setServerData] = useState(null);
  const [localTime, setLocalTime] = useState(new Date());
  const [devices, setDevices] = useState([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const [showProgress, setShowProgress] = useState(false);
  const [processingCity, setProcessingCity] = useState('');

  const handleCityChange = (city) => {
    changeCity(city);
  };

  // –ó–∞—â–∏—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    if (!isAuthenticated()) {
      navigate("/login");
    }
  }, [navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const fetchStatus = async () => {
    try {
      const data = await getStatus();
      setServerData(data);
      setDevices(data.devices || []);
    } catch (e) {
      if (e.message === "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è") {
        setServerData({ error: "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞." });
        toast.error("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
      } else {
        setServerData({ error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞" });
        toast.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞");
      }
    }
  };

  // –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    const timer = setInterval(() => {
      setLocalTime(new Date());
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
  const handleProcessVideo = async (city) => {
    try {
      console.log('Starting video processing for:', city); // –û—Ç–ª–∞–¥–∫–∞
      setProcessingCity(city);
      setShowProgress(true);

      const result = await runConcatScript(city);

      console.log('Script start result:', result); // –û—Ç–ª–∞–¥–∫–∞

      if (!result.success) {
        toast.error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ');
        setShowProgress(false);
      }
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ polling –≤ VideoProgress
    } catch (error) {
      console.error('Error processing video:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ');
      setShowProgress(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const handleProgressComplete = () => {
    console.log('Progress complete called'); // –û—Ç–ª–∞–¥–∫–∞
    setShowProgress(false);
    setProcessingCity('');
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    fetchStatus();
    toast.success(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è ${processingCity} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
  };

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const monitorScriptProgress = () => {
    const interval = setInterval(async () => {
      try {
        const data = await getScriptStatus();
        if (data.status === "completed" || data.status === "error") {
          clearInterval(interval);
          fetchStatus();
          if (data.status === "completed") {
            toast.success("–°–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!");
          } else {
            toast.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${data.message}`);
          }
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", e);
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞");
      }
    }, 2000);
    return () => clearInterval(interval);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    fetchStatus();
  }, []);

  // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  if (!serverData) {
    return (
      <Layout>
        <div className="admin-admin-container">
          <div className="admin-container">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="admin-admin-container">
        <div className="admin-container">
          {/* –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π JSX */}
          <div className="status_div">
            {serverData.error ? (
              <span style={{ color: "red" }}>{serverData.error}</span>
            ) : (
              <>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> {serverData.status} |{" "}
                <strong>–í—Ä–µ–º—è:</strong> {localTime.toLocaleTimeString()} |{" "}
                <strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> {serverData.activeDevices} |{" "}
                <strong>–°–µ—Å—Å–∏—è:</strong> {serverData.session.phase} (
                {serverData.session.id})
              </>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
          <button
            className="global-actions-buttons"
            onClick={fetchStatus}
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          </button>

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≥–æ—Ä–æ–¥–æ–≤ */}
          <CitySwitcher onCityChange={handleCityChange} />

          {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ */}
          {showProgress && (
            <VideoProgress
              city={processingCity}
              onComplete={handleProgressComplete}
            />
          )}

          {/* –ü–ª–µ–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ */}
          {(isAdmin || isModerator) && <VideoPlayer />}

          <div className="main">
            <h2 style={{ marginTop: "50px" }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º–∏</h2>
            <VideoManager
              onFilesChange={fetchStatus}
              onProcessVideo={handleProcessVideo} 
              isProcessing={showProgress}
            />



            {(isAdmin || isModerator) && (
              <>
                <h2>–ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h2>
                <DevicesTable
                  devices={devices}
                  sendCommand={sendDeviceCommand}
                  onCommandSent={fetchStatus}
                  restartAll={restartAllDevices}
                  runConcatScript={handleProcessVideo} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                  monitorScriptProgress={monitorScriptProgress}
                  fetchStatus={fetchStatus}
                  currentUser={currentUser}
                  isProcessing={showProgress}
                />

              </>
            )}

            {isAdmin && (
              <>
                <h2>–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
                <ActiveSessions />
              </>
            )}
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default AdminPanel;